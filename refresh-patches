#!/usr/bin/env python3
from __future__ import annotations

import argparse
import os
import subprocess

HERE = os.path.abspath(os.path.dirname(__file__))


def _release_message(version: str) -> str:
    version, _, prerelease = version.partition('~')
    msg = f'Python {version}'
    for s, w in (('a', 'alpha'), ('b', 'beta'), ('rc', 'release candidate')):
        if prerelease.startswith(s):
            release = '' if s == 'rc' else ' release'
            return f'{msg} {w} {prerelease[len(s):]}{release}.'
    else:
        return f'{msg} release.'


def _quiet(*cmd: str) -> None:
    subprocess.check_call(cmd, stdout=subprocess.DEVNULL)


def main() -> int:
    parser = argparse.ArgumentParser()
    parser.add_argument('branch_name')
    parser.add_argument('--repo', default='.')
    args = parser.parse_args()

    os.chdir(args.repo)

    print('ensuring branches available...')
    _quiet('git', 'checkout', '-q', 'pristine-tar')
    _quiet('git', 'checkout', '-q', 'upstream')

    _quiet('git', 'checkout', '-q', args.branch_name)
    _quiet('gbp', 'pq', 'import')
    _quiet('git', 'checkout', '-q', args.branch_name)
    _quiet('git', 'merge', '--no-edit', 'upstream')
    if subprocess.call(('gbp', 'pq', 'rebase')):
        print('*' * 79)
        print('Did not rebase cleanly!')
        print('- to cancel: `git rebase --abort` and `exit 1`')
        print('- to continue: resolve the rebase conflicts and `exit 0`')
        print('*' * 79)
        ret = subprocess.call(os.environ.get('SHELL', 'bash'))
        if ret:
            return ret
    _quiet('gbp', 'pq', 'export')
    _quiet('git', 'add', 'debian/patches')
    if subprocess.call(('git', 'diff', '--staged', '--quiet')):
        _quiet('git', 'commit', '-m', 'Refresh patches.')
    print('- patches refreshed')

    cmd = ('git', 'log', '-1', '--format=%s', 'upstream')
    version = subprocess.check_output(cmd).decode().split()[-1]
    _quiet('sed', '-i', f's/^SVER=.*$/SVER={version}/g', 'debian/rules')
    _quiet('git', 'commit', '-am', f'Update SVER to {version}')
    print(f'- SVER updated to {version}')

    dist = subprocess.check_output((
        'dpkg-parsechangelog', '--show-field=distribution',
    )).decode().strip()
    debian_version = f'{version}-1+{dist}1'
    _quiet(
        os.path.join(HERE, 'dch'),
        '--newversion', debian_version, '--distribution', dist,
        _release_message(version),
    )
    _quiet('git', 'commit', '-am', f'Finish changelog for {debian_version}')
    print('- changelog finished')

    return 0


if __name__ == '__main__':
    raise SystemExit(main())
