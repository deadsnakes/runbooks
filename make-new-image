#!/usr/bin/env python3
from __future__ import annotations

import argparse
import os.path
import re
import shlex
import subprocess
import sys


DOCKERFILE_MK_BUILD_DEPS = (
    'FROM ubuntu:{codename}\n'
    'RUN : \\\n'
    '    && apt-get update -qq \\\n'
    '    && DEBIAN_FRONTEND=noninteractive apt-get install \\\n'
    '        -qq -y --no-install-recommends \\\n'
    '        devscripts equivs \\\n'
    '    && apt-get clean \\\n'
    '    && rm -rf /var/lib/apt/lists/*'
)


DOCKERFILE_TEMPLATE = (
    '# Created with `{cmd}` DO NOT EDIT\n'
    'FROM ubuntu:{codename}\n'
    'RUN : \\\n'
    '    && apt-get update -qq \\\n'
    '    && DEBIAN_FRONTEND=noninteractive apt-get install \\\n'
    '        -qq -y --no-install-recommends \\\n'
    '        {packages} \\\n'
    '    && apt-get clean \\\n'
    '    && rm -rf /var/lib/apt/lists/*'
)


DEPENDS = ' Depends:'
TO_APT_RE = re.compile(r'(,| \([^)]+\))')

ALWAYS_DEPS = {
    'devscripts', 'equivs', 'git-buildpackage', 'gnupg', 'pristine-tar',
}


def main() -> int:
    parser = argparse.ArgumentParser()
    parser.add_argument('--codename', required=True)
    parser.add_argument('control_filename')
    args = parser.parse_args()

    img = f'make-new-image-{args.codename}'
    subprocess.run(
        ('docker', 'build', '-qt', img, '-f', '-', '.'),
        input=DOCKERFILE_MK_BUILD_DEPS.format(codename=args.codename).encode(),
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
        check=True,
    )

    lines = subprocess.run(
        (
            'docker', 'run', '--rm',
            '-v', f'{os.path.abspath(args.control_filename)}:/control:ro',
            img, 'bash', '-ec',
            'mk-build-deps /control && '
            'dpkg -I *.deb | grep "^ Depends:"',
        ),
        stdout=subprocess.PIPE,
        stderr=subprocess.DEVNULL,
    ).stdout.decode().splitlines()
    depends, = (line for line in lines if line.startswith(DEPENDS))
    depends = depends[len(DEPENDS):]

    deps = set(TO_APT_RE.sub('', depends).split()) | ALWAYS_DEPS

    print(
        DOCKERFILE_TEMPLATE.format(
            cmd=shlex.join(sys.argv),
            codename=args.codename,
            packages=' \\\n        '.join(sorted(deps)),
        ),
    )
    return 0


if __name__ == '__main__':
    raise SystemExit(main())
